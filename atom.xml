<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>running-in-sky</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-29T16:05:23.811Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zzzhy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scala_learning</title>
    <link href="http://yoursite.com/2019/10/30/scala-learning/"/>
    <id>http://yoursite.com/2019/10/30/scala-learning/</id>
    <published>2019-10-29T16:04:17.000Z</published>
    <updated>2019-10-29T16:05:23.811Z</updated>
    
    <content type="html"><![CDATA[<p>#scala 学习</p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><blockquote><p>大部分都能隐式转换，Byte、Short需要显式指定</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val little : Byte = <span class="number">3</span></span><br><span class="line">val little:Short = <span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>char、String支持\转义</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val a = <span class="string">'a'</span>    <span class="comment">//char = 'a'</span></span><br><span class="line">val str = <span class="string">"hello \101"</span>      <span class="comment">//String=hello A</span></span><br></pre></td></tr></table></figure><blockquote><p>带小数点的默认为Double，以F结尾表示Float</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val pi = <span class="number">3.14</span>F</span><br><span class="line">val pi = <span class="number">3.14</span> <span class="comment">// double</span></span><br></pre></td></tr></table></figure><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function">(<span class="params">v : Int</span>) =&gt;</span> v + <span class="number">1</span>  <span class="comment">//匿名函数赋值给一个变量</span></span><br><span class="line">def addOne(v : Int) : Int = v + <span class="number">1</span>  <span class="comment">//非匿名函数</span></span><br></pre></td></tr></table></figure><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><blockquote><p>if表达式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val filename = </span><br><span class="line"><span class="keyword">if</span> (!args.isEmpty) args(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span> <span class="string">"default.txt"</span></span><br></pre></td></tr></table></figure><blockquote><p>while循环</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算最大公约数</span></span><br><span class="line">def gcdLoop(x : Long,<span class="attr">y</span>: Long) : Long = &#123;</span><br><span class="line">    <span class="keyword">var</span> a = x</span><br><span class="line">    <span class="keyword">var</span> b = y</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>)&#123;</span><br><span class="line">        val temp = a;</span><br><span class="line">        a = b % a;</span><br><span class="line">        b = temp</span><br><span class="line">    &#125;</span><br><span class="line">    b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>do…while</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> line = <span class="string">""</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    line = readLine()</span><br><span class="line">    println(<span class="string">"read:"</span>+line)</span><br><span class="line">&#125;<span class="keyword">while</span>(line != <span class="string">""</span>)</span><br></pre></td></tr></table></figure><blockquote><p>for表达式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( i &lt;- <span class="number">1</span> to <span class="number">4</span>)</span><br><span class="line">    println(<span class="string">"Iteration "</span>+ i)</span><br></pre></td></tr></table></figure><blockquote><p>try…catch</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def g() : Int = &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">        <span class="keyword">case</span> ex: <span class="function"><span class="params">ArithmeticException</span> =&gt;</span> &#123;</span><br><span class="line">            ex.toString</span><br><span class="line">            <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> _ :<span class="function"><span class="params">Throwable</span> =&gt;</span> <span class="number">3</span></span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        println(<span class="string">"finally"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h2><blockquote><p>数组Array：可修改，通过括号()来引用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val greeting = <span class="keyword">new</span> <span class="built_in">Array</span>[<span class="built_in">String</span>](<span class="number">2</span>)</span><br><span class="line">greeting(<span class="number">0</span>) = <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><blockquote><p>列表List：只读</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val numbers = List(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">numbers(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>元组Tuple：只读，与List类似，可以是不同元素,下标从1开始</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val hostPort = (<span class="string">"localhost"</span>,<span class="number">80</span>)</span><br><span class="line">hostPort._1</span><br><span class="line">hostPort._2</span><br></pre></td></tr></table></figure><blockquote><p>集合Set：只读，没有重复的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>映射Map:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val m = <span class="built_in">Map</span>(<span class="number">1</span> -&gt; <span class="string">"one"</span>,<span class="number">2</span> -&gt; <span class="string">"two"</span>)</span><br><span class="line">m(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//创建可写版本</span></span><br><span class="line">val m = scala.collection.mutable.Map[Int,<span class="built_in">String</span>](<span class="number">1</span> -&gt; <span class="string">"one"</span>,<span class="number">2</span> -&gt; <span class="string">"two"</span>)</span><br><span class="line">m += (<span class="number">3</span> -&gt; <span class="string">"three"</span>)</span><br><span class="line">m(<span class="number">4</span>)=<span class="string">"four"</span></span><br><span class="line">m -= <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="定义class"><a href="#定义class" class="headerlink" title="定义class"></a>定义class</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Hello( _a : Int) &#123;</span><br><span class="line">    private val a = _a;</span><br><span class="line">    println(<span class="string">"initializing...("</span> + _a + “） ”);</span><br><span class="line">    def add( b : Int) : Int = a + b;</span><br><span class="line">    def <span class="keyword">this</span>() = <span class="keyword">this</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Hello2(a : Int) extends Hello(a) &#123;</span><br><span class="line">    def add(b : Int, <span class="attr">c</span> : Int) : Int = a + b+ c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单实例对象"><a href="#单实例对象" class="headerlink" title="单实例对象"></a>单实例对象</h2><blockquote><p>scala 不支持static变量、成员，但提供了单例对象，用object来定义</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">object Timer &#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    def currentCount() : Long = &#123;</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Timer.currentCount()</span><br></pre></td></tr></table></figure><blockquote><p>单例对象可以和类具有相同的名字，放在同一个源文件，可以相互访问彼此的private方法和变量。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Bar(foo : String)</span><br><span class="line">object Bar&#123;</span><br><span class="line">    def apply(foo : <span class="built_in">String</span>) = <span class="keyword">new</span> Bar(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(x:Int) =&gt; x+<span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> incr = <span class="function">(<span class="params">x:Int</span>) =&gt;</span> x+<span class="number">1</span></span><br><span class="line">incr(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="匿名函数作为参数"><a href="#匿名函数作为参数" class="headerlink" title="匿名函数作为参数"></a>匿名函数作为参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val someNumbers = List(<span class="number">1</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">0</span>)</span><br><span class="line">someNumbers.filter( <span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">0</span> )</span><br><span class="line"><span class="comment">//如果匿名函数的参数只被使用一次，可以直接写函数体，用_代替一个参数</span></span><br><span class="line">someNumbers.filter(_ &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.io.Source</span><br><span class="line">def processFile(filename : <span class="built_in">String</span>)&#123;</span><br><span class="line">    def processLine(line : <span class="built_in">String</span>)&#123;</span><br><span class="line">        println(line)</span><br><span class="line">    &#125;</span><br><span class="line">    Source.fromFile(filename).getLines.foreach(processLine);</span><br><span class="line">&#125;</span><br><span class="line">processFile(<span class="string">"t.scala"</span>)</span><br></pre></td></tr></table></figure><h2 id="部分应用函数"><a href="#部分应用函数" class="headerlink" title="部分应用函数"></a>部分应用函数</h2><blockquote><p>函数的参数可以分步提供</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def adder(m : Int,<span class="attr">n</span> : Int, <span class="attr">z</span> : Int) : Int = m + n + z</span><br><span class="line">val adder2 = adder(<span class="number">2</span>,<span class="attr">_</span>:Int,<span class="attr">_</span>:Int) <span class="comment">//部分应用函数，只输入参数2，用_代替没有准备好的另一个参数</span></span><br><span class="line">val adder3 = add2(<span class="number">3</span>,<span class="attr">_</span>:Int)</span><br><span class="line">adder3(<span class="number">4</span>)  <span class="comment">//9</span></span><br></pre></td></tr></table></figure><h2 id="柯里化函数currying"><a href="#柯里化函数currying" class="headerlink" title="柯里化函数currying"></a>柯里化函数currying</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非柯里化函数</span></span><br><span class="line">def plainSum(x : Int,<span class="attr">y</span> : Int) = x + y;</span><br><span class="line">plainSum(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">//柯里化</span></span><br><span class="line">def curriedSum(x:Int)(y:Int) = x + y</span><br><span class="line"><span class="comment">//可以一次输入两个参数来调用</span></span><br><span class="line">curriedSum(<span class="number">1</span>)(<span class="number">2</span>)</span><br><span class="line">val onePlus = curriedSum(<span class="number">1</span>)_  <span class="comment">//使用了部分应用函数符号_</span></span><br><span class="line">onePlus(<span class="number">2</span>)</span><br><span class="line">val twoPlus = curriedSum(<span class="number">2</span>)_</span><br><span class="line">twoPlus(<span class="number">3</span>)  <span class="comment">//5</span></span><br></pre></td></tr></table></figure><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package org.scala.example</span><br><span class="line">object Color&#123;</span><br><span class="line">    val BLUE = <span class="string">"Blue"</span></span><br><span class="line">    val Green = <span class="string">"Green"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">times match&#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">"one"</span></span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span> =&gt; <span class="string">"two"</span></span><br><span class="line">   <span class="keyword">case</span> <span class="function"><span class="params">_</span> =&gt;</span> <span class="string">"some other"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象匹配</span></span><br><span class="line">def bigger(o : Any) : Any = &#123;</span><br><span class="line">   o match &#123;</span><br><span class="line">       <span class="keyword">case</span> i : Int <span class="keyword">if</span> i &gt; <span class="number">0</span> =&gt; i - <span class="number">1</span></span><br><span class="line">       <span class="keyword">case</span> i : <span class="function"><span class="params">Int</span> =&gt;</span> i + <span class="number">1</span></span><br><span class="line">       <span class="keyword">case</span> d: Double <span class="keyword">if</span> d &gt; <span class="number">0.0</span> =&gt; d - <span class="number">0.1</span></span><br><span class="line">       <span class="keyword">case</span> d: <span class="function"><span class="params">Double</span> =&gt;</span> d + <span class="number">0.1</span></span><br><span class="line">       <span class="keyword">case</span> text:<span class="function"><span class="params">String</span> =&gt;</span> text + <span class="string">"s"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">val v42 = <span class="number">42</span></span><br><span class="line"><span class="comment">// print Not 42</span></span><br><span class="line">Some(<span class="number">3</span>) match &#123;</span><br><span class="line">   <span class="keyword">case</span> Some(<span class="string">`v42`</span>) =&gt; println(<span class="string">"42"</span>)</span><br><span class="line">   <span class="keyword">case</span> <span class="function"><span class="params">_</span> =&gt;</span> println(<span class="string">"Not 42"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="scala应用程序"><a href="#scala应用程序" class="headerlink" title="scala应用程序"></a>scala应用程序</h2><blockquote><p>入口：单实例对象，内部必须有一个main方法，main有且仅有一个Array[String]的参数，并且返回Unit</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hello.scala</span></span><br><span class="line">object Hello&#123;</span><br><span class="line">    def main(args : <span class="built_in">Array</span>[<span class="built_in">String</span>]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (arg &lt;- args)</span><br><span class="line">            println(<span class="string">"hello "</span> + arg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; scala Hello scala spark</span><br><span class="line">//<span class="built_in">print</span></span><br><span class="line">hello scala</span><br><span class="line">hello spark</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> more =<span class="number">1</span></span><br><span class="line">more: Int = <span class="number">1</span></span><br><span class="line">scala&gt; val addMore = <span class="function">(<span class="params">x:Int</span>) =&gt;</span> x + more</span><br><span class="line">addMore: <span class="function"><span class="params">Int</span> =&gt;</span> Int = <span class="xml"><span class="tag">&lt;<span class="name">function1</span>&gt;</span></span></span><br><span class="line"><span class="xml">scala&gt; addMore (100)</span></span><br><span class="line"><span class="xml">res1: Int = 101</span></span><br><span class="line"><span class="xml">//addMore为闭包，引用了外部变量more。当这个自由变量发生变化时，Scala 的闭包能够捕获到这个变化，因此 Scala 的闭包捕获的是**变量本身**而不是当时变量的值。</span></span><br><span class="line"><span class="xml">scala&gt; more =  9999</span></span><br><span class="line"><span class="xml">more: Int = 9999</span></span><br><span class="line"><span class="xml">scala&gt; addMore ( 10)</span></span><br><span class="line"><span class="xml">res2: Int = 10009</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">如果变量在闭包在发生变化，也会反映到函数外面定义的闭包的值。比如：</span></span><br><span class="line"><span class="xml">scala&gt; val someNumbers = List ( -11, -10, -5, 0, 5, 10)</span></span><br><span class="line"><span class="xml">someNumbers: List[Int] = List(-11, -10, -5, 0, 5, 10)</span></span><br><span class="line"><span class="xml">scala&gt; var sum =0</span></span><br><span class="line"><span class="xml">sum: Int = 0</span></span><br><span class="line"><span class="xml">scala&gt; someNumbers.foreach ( sum += _)</span></span><br><span class="line"><span class="xml">scala&gt; sum</span></span><br><span class="line"><span class="xml">res4: Int = -11</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#scala 学习&lt;/p&gt;
&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;大部分都能隐式转换，Byte、Short需要显式指定&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="scala" scheme="http://yoursite.com/categories/scala/"/>
    
    
      <category term="scala" scheme="http://yoursite.com/tags/scala/"/>
    
  </entry>
  
</feed>
